<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Python-urllib.parse模块</title>
    <url>/2019/10/14/Python-urllib.parse%E6%A8%A1%E5%9D%97/</url>
    <content><![CDATA[<h1 id="Python-urllib-parse模块"><a href="#Python-urllib-parse模块" class="headerlink" title="Python-urllib.parse模块"></a>Python-urllib.parse模块</h1><hr><h2 id="模块简介"><a href="#模块简介" class="headerlink" title="模块简介"></a>模块简介</h2><p>url.parse :定义了url的标准接口，实现url的各种抽取<br>parse模块的使用：url的解析，合并，编码，解码</p><h3 id="1、urlparse"><a href="#1、urlparse" class="headerlink" title="1、urlparse"></a>1、urlparse</h3><figure class="highlight subunit"><table><tr><td class="code"><pre><span class="line">from urllib.parse import urlparse</span><br><span class="line"><span class="keyword">test </span>= urlparse("https://www.baidu.com/test.php?id=1")</span><br><span class="line">print (test)</span><br></pre></td></tr></table></figure><a id="more"></a>



<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">ParseResult(<span class="attribute">scheme</span>=<span class="string">'https'</span>, <span class="attribute">netloc</span>=<span class="string">'www.baidu.com'</span>, <span class="attribute">path</span>=<span class="string">'/test.php'</span>, <span class="attribute">params</span>=<span class="string">''</span>, <span class="attribute">query</span>=<span class="string">'id=1'</span>, <span class="attribute">fragment</span>=<span class="string">''</span>)</span><br></pre></td></tr></table></figure>

<p>将url分为6个部分，返回一个包含6个字符串项目的元组：协议、位置、路径、参数、查询、片段。</p>
<h3 id="2、urlsplit"><a href="#2、urlsplit" class="headerlink" title="2、urlsplit"></a>2、urlsplit</h3><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">from urllib<span class="selector-class">.parse</span> import urlsplit</span><br><span class="line">test2= urlsplit(<span class="string">"https://www.baidu.com/test.php?id=1"</span>)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(test2)</span></span></span><br></pre></td></tr></table></figure>

<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">SplitResult(<span class="attribute">scheme</span>=<span class="string">'https'</span>, <span class="attribute">netloc</span>=<span class="string">'www.baidu.com'</span>, <span class="attribute">path</span>=<span class="string">'/test.php'</span>, <span class="attribute">query</span>=<span class="string">'id=1'</span>, <span class="attribute">fragment</span>=<span class="string">''</span>)</span><br></pre></td></tr></table></figure>

<p>和urlparse差不多，将url分为5部分，返回一个包含5个字符串项目的元组：协议、位置、路径、查询、片段。</p>
<h3 id="3、urlunparse"><a href="#3、urlunparse" class="headerlink" title="3、urlunparse"></a>3、urlunparse</h3><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">from urllib<span class="selector-class">.parse</span> import urlunparse</span><br><span class="line">url_parmas = (<span class="string">'https'</span>, <span class="string">'baidu.com'</span>, <span class="string">'/info/123456'</span>, <span class="string">''</span>, <span class="string">'wd=123&amp;page=20'</span>, <span class="string">'home'</span>)</span><br><span class="line">result = urlunparse(url_parmas)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(result)</span></span></span><br></pre></td></tr></table></figure>

<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">https:<span class="regexp">//</span>baidu.com<span class="regexp">/info/</span><span class="number">123456</span>?wd=<span class="number">123</span>&amp;page=<span class="number">20</span><span class="comment">#home</span></span><br></pre></td></tr></table></figure>

<p>实现URL的构造，<strong>def urlunparse(components)</strong>其中components:是一个可迭代对象，长度必须为6</p>
<h3 id="4、urljoin"><a href="#4、urljoin" class="headerlink" title="4、urljoin"></a>4、urljoin</h3><figure class="highlight makefile"><table><tr><td class="code"><pre><span class="line">from urllib.parse import urljoin</span><br><span class="line">base_url = <span class="string">"https://www.baidu.com/home1/addurl/content?id=1"</span></span><br><span class="line">sub_url = <span class="string">"/home2/addurl/content?id=2"</span></span><br><span class="line">print (urljoin(base_url,sub_url))</span><br></pre></td></tr></table></figure>

<figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">https:<span class="regexp">//</span>www.baidu.com<span class="regexp">/home2/</span>addurl<span class="regexp">/content?id=2</span></span><br></pre></td></tr></table></figure>

<p>传递一个基础链接,根据基础链接可以将某一个不完整的链接拼接为一个完整链接</p>
<h3 id="5、urlencode"><a href="#5、urlencode" class="headerlink" title="5、urlencode"></a>5、urlencode</h3><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">from urllib<span class="selector-class">.parse</span> import urlencode</span><br><span class="line">test1 = &#123;</span><br><span class="line">    <span class="string">"id"</span>:<span class="string">"1"</span>,</span><br><span class="line">    <span class="string">"page"</span>:<span class="number">20</span></span><br><span class="line">&#125;</span><br><span class="line">test1_str = urlencode(test1)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(test1_str)</span></span></span><br></pre></td></tr></table></figure>

<figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="attr">id</span>=<span class="number">1</span>&amp;page=<span class="number">20</span></span><br></pre></td></tr></table></figure>

<p>urlencode()将字典构形式的参数序列化为url编码后的字符串（常用来构造get请求和post请求的参数）key1=value1&amp;key2=value2</p>
<h3 id="6、qoute"><a href="#6、qoute" class="headerlink" title="6、qoute()"></a>6、qoute()</h3><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">from urllib<span class="selector-class">.parse</span> import quote</span><br><span class="line">word = <span class="string">"中文"</span></span><br><span class="line">url = <span class="string">'http://www.baidu.com/s?wd='</span>+quote(word)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(quote(word)</span></span>)</span><br><span class="line"><span class="function"><span class="title">print</span><span class="params">(url)</span></span></span><br></pre></td></tr></table></figure>

<figure class="highlight llvm"><table><tr><td class="code"><pre><span class="line"><span class="symbol">%E4</span><span class="symbol">%B8</span><span class="symbol">%AD</span><span class="symbol">%E6</span><span class="symbol">%96</span><span class="symbol">%87</span></span><br><span class="line">http://www.baidu.com/s?wd=<span class="symbol">%E4</span><span class="symbol">%B8</span><span class="symbol">%AD</span><span class="symbol">%E6</span><span class="symbol">%96</span><span class="symbol">%87</span></span><br></pre></td></tr></table></figure>

<p>quote()可以将中文转换为URL编码格式</p>
<hr>
<h3 id="本文作者：Sh4Nn0n"><a href="#本文作者：Sh4Nn0n" class="headerlink" title="本文作者：Sh4Nn0n"></a>本文作者：Sh4Nn0n</h3><h3 id="本文首发于Sh4Nn0n’s-Blog，写文不易，转载请注明出处。"><a href="#本文首发于Sh4Nn0n’s-Blog，写文不易，转载请注明出处。" class="headerlink" title="本文首发于Sh4Nn0n’s Blog，写文不易，转载请注明出处。"></a>本文首发于<a href="http://www.sh4nn0n.com" target="_blank" rel="noopener">Sh4Nn0n’s Blog</a>，写文不易，转载请注明出处。</h3>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>XSS-编码解码</title>
    <url>/2019/10/14/XSS-%E7%BC%96%E7%A0%81%E8%A7%A3%E7%A0%81/</url>
    <content><![CDATA[<h1 id="跨站脚本攻击（XSS）-编码剖析"><a href="#跨站脚本攻击（XSS）-编码剖析" class="headerlink" title="跨站脚本攻击（XSS）-编码剖析"></a>跨站脚本攻击（XSS）-编码剖析</h1><hr><ul>
<li>前言： 笔者从事安全两年间，看了许多xss文章，踩过很多坑，想按照自己的想法整理一下前辈们的总结，随有了这篇文章，学会XSS，理解浏览器的编码原理是重要的部分之一。</li>
</ul><h2 id="1、浏览器的解码"><a href="#1、浏览器的解码" class="headerlink" title="1、浏览器的解码"></a>1、浏览器的解码</h2><p><img src="/2019/10/14/XSS-编码解码/1.jpg" alt></p><p>上图显示了浏览器从接收代码，到渲染完成的过程：<br>1、HTML/SVG/XHTML 解析，Webkit有三个C++的类对应这三类文档。解析这三种文件会产生一个DOM Tree。<br>2、CSS 解析，解析CSS会产生CSS规则树。<br>3、Javascript DOM，主要是通过DOM API和CSSOM API来操作DOM Tree和CSS Rule Tree.</p><a id="more"></a>



<p>浏览器最早开始解析HTML代码的时候，将标签转化为内容树中的DOM节点，此时浏览器识别标签的时候，其HTML解析器是无法识别<strong>被实体编码的内容</strong>的，（这代表，如果开发人员在服务器端实体编码了我们的代码，那么我们在这一环节将无法改变DOM树结构）只有建立起<strong>DOM树</strong>之后，才能对每个节点的内容进行渲染，在此基础上，JavaScript Dom API参与进来，可以对DOM树进行修改（包含Javascript的恶意代码会触发Javascript解释器，来改变DOM树结构和内容从而执行XSS）。而此时，CSS解析器负责解析外部CSS文件以及Style标签中的样式内容，这些信息将搭配HTML中的可见指令构建一个Rendering Tree。</p>
<h2 id="2、编码和解码发生的顺序"><a href="#2、编码和解码发生的顺序" class="headerlink" title="2、编码和解码发生的顺序"></a>2、编码和解码发生的顺序</h2><p>我们刚才讲解了浏览器的渲染过程。现在我们来看一下从我们输入恶意代码，传入到服务器，再到服务器返回给浏览器，最终浏览器渲染成网页的这段过程中，都发生了什么。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=utf-8"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:alert('&lt;?php echo $_GET['input'];?&gt;');"</span>&gt;</span>test<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">input</span>: <span class="number">%26</span>lt<span class="number">%5</span>cu4e00<span class="number">%26</span>gt</span><br></pre></td></tr></table></figure>

<p>假设我们输入的值为 <em>%26lt%5cu4e00%26gt</em> 并通过GET请求提交至服务器，服务器回对我们输入的值进行URL解码，变成 <em>&amp;lt\u4e00&amp;gt</em> ，服务端传回数据给浏览器，浏览器生成了DOM树，此时的代码是这样的：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"Content-Type"</span> <span class="attr">content</span>=<span class="string">"text/html; charset=utf-8"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:alert('&amp;lt\u4e00&amp;gt');"</span>&gt;</span>test<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>我们可以在页面右键点击 <strong>查看网站源代码</strong> 查看源码。（注意不是F12，F12的检查元素功能看到是的经过浏览器渲染后的内容)</p>
<p>DOM树生成之后，浏览器对我们的代码进行渲染，首先对标签里的元素进行HTML实体解码，我们的代码变为了：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:alert('&lt;\u4e00&gt;');"</span>&gt;</span>test<span class="tag">&lt;/<span class="name">a</span>&gt;</span>\</span><br></pre></td></tr></table></figure>

<p>也就是f12的检查元素中显示的内容</p>
<p>然后，当我们点击链接的时候，浏览器对href中的链接发起了一个请求，执行了Javascript代码，此时Javascript解释器对我们的参数进行了Unicode解码，此时，我们的代码变成了：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:alert('&lt;-&gt;');"</span>&gt;</span>test<span class="tag">&lt;/<span class="name">a</span>&gt;</span>\</span><br></pre></td></tr></table></figure>

<p>并最终弹框。<br><img src="/2019/10/14/XSS-编码解码/2.png" alt></p>
<h2 id="3、一些注意事项"><a href="#3、一些注意事项" class="headerlink" title="3、一些注意事项"></a>3、一些注意事项</h2><p>当我们尝试使用编码来绕过过滤器时，要避免一些特殊的情况，如：<br>1、不能对Javacscript等伪协议进行URL编码，URL解码后会当做无协议处理。<br>2、在进行HTML解码的时候，不能对 <strong>“(‘</strong> 这些特殊字符进行HTML实体编码，解码后这些字符将变成普通文本。<br>3、在进行Javascript解析的时候，<strong>“(‘</strong> 这些控制字符不能进行JS编码，解码后这些符号被当做文本处理。</p>
<hr>
<h3 id="本文作者：Sh4Nn0n"><a href="#本文作者：Sh4Nn0n" class="headerlink" title="本文作者：Sh4Nn0n"></a>本文作者：Sh4Nn0n</h3><h3 id="本文首发于Sh4Nn0n’s-Blog，写文不易，转载请注明出处。"><a href="#本文首发于Sh4Nn0n’s-Blog，写文不易，转载请注明出处。" class="headerlink" title="本文首发于Sh4Nn0n’s Blog，写文不易，转载请注明出处。"></a>本文首发于<a href="http://www.sh4nn0n.com" target="_blank" rel="noopener">Sh4Nn0n’s Blog</a>，写文不易，转载请注明出处。</h3>]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
        <tag>XSS</tag>
        <tag>Web安全</tag>
      </tags>
  </entry>
  <entry>
    <title>Python-正则表达式</title>
    <url>/2019/10/12/Python-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="Python-正则表达式"><a href="#Python-正则表达式" class="headerlink" title="Python-正则表达式"></a>Python-正则表达式</h1><hr><h2 id="1-正则表达式"><a href="#1-正则表达式" class="headerlink" title="1.正则表达式"></a>1.正则表达式</h2><p>正则表达式用来匹配特定的字符串，python中提供RE模块进行正则表达式匹配。</p><h3 id="1-1-正则表达式语法"><a href="#1-1-正则表达式语法" class="headerlink" title="1.1 正则表达式语法"></a>1.1 正则表达式语法</h3><figure class="highlight livescript"><table><tr><td class="code"><pre><span class="line"><span class="string">\w</span>    <span class="comment"># 匹配任意字母、数字、下划线</span></span><br><span class="line"><span class="string">\W</span>    <span class="comment"># 匹配任意非字母、数字、下划线</span></span><br><span class="line"><span class="string">\d</span>    <span class="comment"># 匹配数字</span></span><br><span class="line"><span class="string">\D</span>    <span class="comment"># 匹配所有的非数字</span></span><br><span class="line"><span class="string">\s</span>    <span class="comment"># 匹配空白符号(空格、Tab等)</span></span><br><span class="line"><span class="string">\S</span>    <span class="comment"># 匹配所有非文本</span></span><br><span class="line">.     <span class="comment"># 匹配任意字符1次</span></span><br><span class="line">*     <span class="comment"># 匹配前面的表达式0/n次 \d*</span></span><br><span class="line">+     <span class="comment"># 匹配前面的表达式1/n次 \d+</span></span><br><span class="line">?     <span class="comment"># 匹配前面的表达式0/1次</span></span><br><span class="line">&#123;m&#125;   <span class="comment"># 匹配前面的表达式m次</span></span><br><span class="line">&#123;m,&#125;  <span class="comment"># 匹配前面的表达式N到无穷</span></span><br><span class="line">&#123;,n&#125;  <span class="comment"># 匹配前面的表达式0到M次</span></span><br><span class="line">&#123;m,n&#125; <span class="comment"># 匹配前面的表达式m到n次 \d&#123;m,n&#125;</span></span><br><span class="line">*?    <span class="comment"># 匹配前面的表达式0次</span></span><br><span class="line">+?    <span class="comment"># 匹配前面的表达式1次</span></span><br><span class="line">[]    <span class="comment"># 字符集 [a-zA-Z0-9\_]</span></span><br><span class="line">()    <span class="comment"># 分组</span></span><br><span class="line">|     <span class="comment"># 或运算 (p|P)ython</span></span><br><span class="line">^     <span class="comment"># 开始符 ^\d</span></span><br><span class="line">$     <span class="comment"># 结尾符 \d$</span></span><br></pre></td></tr></table></figure><a id="more"></a>



<p>这里需要提到一个概念，正则表达式分为<strong>贪婪</strong>和<strong>非贪婪</strong>模式，而python中数量词默认是<strong>贪婪</strong>的，尽可能匹配多的字符，贪婪模式下字符串查找会直接走到字符串末尾进行，如果不相等就向前寻找，称为回溯。</p>
<h3 id="1-2-常用匹配的正则语法"><a href="#1-2-常用匹配的正则语法" class="headerlink" title="1.2 常用匹配的正则语法"></a>1.2 常用匹配的正则语法</h3><figure class="highlight tex"><table><tr><td class="code"><pre><span class="line">1.汉字：[<span class="tag">\<span class="name">u</span></span>4e00-<span class="tag">\<span class="name">u</span></span>9fa5]&#123;0,&#125;</span><br><span class="line">2.英文和数字：[A-Za-z0-9]+</span><br><span class="line">3.长度为3-20的所有字符：.&#123;3,20&#125;</span><br><span class="line">4.Email地址：<span class="tag">\<span class="name">w</span></span>+([-+.]<span class="tag">\<span class="name">w</span></span>+)@<span class="tag">\<span class="name">w</span></span>+([-.]<span class="tag">\<span class="name">w</span></span>+).<span class="tag">\<span class="name">w</span></span>+([-.]<span class="tag">\<span class="name">w</span></span>+)*</span><br><span class="line">5.域名：[a-zA-Z0-9][-a-zA-Z0-9]&#123;0,62&#125;(/.[a-zA-Z0-9][-a-zA-Z0-9]&#123;0,62&#125;)+/.?</span><br><span class="line">6.InternetURL：[a-zA-z]+://[^<span class="tag">\<span class="name">s</span></span>] 或 ^http://([<span class="tag">\<span class="name">w</span></span>-]+.)+[<span class="tag">\<span class="name">w</span></span>-]+(/[<span class="tag">\<span class="name">w</span></span>-./?<span class="comment">%&amp;=])?$</span></span><br><span class="line">7.手机号码：^(13[0-9]|14[5|7]|15[0|1|2|3|5|6|7|8|9]|18[0|1|2|3|5|6|7|8|9])<span class="tag">\<span class="name">d</span><span class="string">&#123;8&#125;</span></span><span class="formula">$</span></span><br><span class="line"><span class="formula">8.国内电话号码：<span class="tag">\<span class="name">d</span><span class="string">&#123;3&#125;</span></span>-<span class="tag">\<span class="name">d</span><span class="string">&#123;8&#125;</span></span>|<span class="tag">\<span class="name">d</span><span class="string">&#123;4&#125;</span></span>-<span class="tag">\<span class="name">d</span><span class="string">&#123;7&#125;</span></span>(0511-4405222、021-87888822)</span></span><br><span class="line"><span class="formula">9.日期格式：^<span class="tag">\<span class="name">d</span><span class="string">&#123;4&#125;</span></span>-<span class="tag">\<span class="name">d</span><span class="string">&#123;1,2&#125;</span></span>-<span class="tag">\<span class="name">d</span><span class="string">&#123;1,2&#125;</span></span></span></span><br><span class="line"><span class="formula">10.空白行的正则表达式：<span class="tag">\<span class="name">n</span></span><span class="tag">\<span class="name">s*</span></span><span class="tag">\<span class="name">r</span></span> (可以用来删除空白行)</span></span><br><span class="line"><span class="formula">11.腾讯QQ号：[1-9][0-9]&#123;4,&#125;</span></span><br><span class="line"><span class="formula">11.IP地址提取：<span class="tag">\<span class="name">d</span></span>+.<span class="tag">\<span class="name">d</span></span>+.<span class="tag">\<span class="name">d</span></span>+.<span class="tag">\<span class="name">d</span></span>+</span></span><br></pre></td></tr></table></figure>

<h2 id="2-RE模块"><a href="#2-RE模块" class="headerlink" title="2.RE模块"></a>2.RE模块</h2><figure class="highlight pf"><table><tr><td class="code"><pre><span class="line">import re       <span class="comment"># 下面仅列出常用方法</span></span><br><span class="line"></span><br><span class="line">re.compile(pattern[, <span class="keyword">flags</span>]) 	    <span class="comment"># 创建一个正则表达式对象</span></span><br><span class="line">re.search(pattern, string[, <span class="keyword">flags</span>]) <span class="comment"># 查找符合表达式的第一个对象</span></span><br><span class="line">re.<span class="built_in">match</span>(pattern, string[, <span class="keyword">flags</span>])  <span class="comment"># 查找符合表达式的对象</span></span><br><span class="line">re.findall(pattern, string, <span class="keyword">flags</span>)  <span class="comment"># 获取字符串中所有匹配的字符串，返回一个列表</span></span><br><span class="line">re.split(pattern, string[, maxsplit=<span class="number">0</span>, <span class="keyword">flags</span>]) <span class="comment"># 根据模式的匹配项分割字符串</span></span><br><span class="line">re.sub(pattern,repl, string[, count=<span class="number">0</span>, <span class="keyword">flags</span>]) <span class="comment"># 将字符串中所有的pattern的匹配项用repl替换</span></span><br><span class="line">re.escape(string) 		    <span class="comment"># 将字符串所有特殊正则表达式字符转义</span></span><br><span class="line"></span><br><span class="line">pattern <span class="comment"># 编译时用的表达式字符串</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">flags</span>   <span class="comment"># 编译标志位</span></span><br><span class="line">re.S(DOTALL)	  <span class="comment"># 使.匹配包括换行在内的所有字符</span></span><br><span class="line">re.I(IGNORECASE)  <span class="comment"># 使匹配对大小写不敏感</span></span><br><span class="line">re.L(LOCALE)      <span class="comment"># 做本地化识别（locale-aware)匹配，法语等</span></span><br><span class="line">re.M(MULTILINE)   <span class="comment"># 多行匹配，影响^和$</span></span><br><span class="line">re.X(VERBOSE)     <span class="comment"># 该标志通过给予更灵活的格式以便将正则表达式写得更易于理解</span></span><br><span class="line">re.U(Unicode)	  <span class="comment"># 根据Unicode字符集解析字符，这个标志影响\w,\W,\b,\B</span></span><br></pre></td></tr></table></figure>

<hr>
<h3 id="本文作者：Sh4Nn0n"><a href="#本文作者：Sh4Nn0n" class="headerlink" title="本文作者：Sh4Nn0n"></a>本文作者：Sh4Nn0n</h3><h3 id="本文首发于Sh4Nn0n’s-Blog，写文不易，转载请注明出处。"><a href="#本文首发于Sh4Nn0n’s-Blog，写文不易，转载请注明出处。" class="headerlink" title="本文首发于Sh4Nn0n’s Blog，写文不易，转载请注明出处。"></a>本文首发于<a href="http://www.sh4nn0n.com" target="_blank" rel="noopener">Sh4Nn0n’s Blog</a>，写文不易，转载请注明出处。</h3>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>正则表达式</tag>
      </tags>
  </entry>
</search>
