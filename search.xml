<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>XSS-编码解码</title>
    <url>/2019/10/14/XSS-%E7%BC%96%E7%A0%81%E8%A7%A3%E7%A0%81/</url>
    <content><![CDATA[<h1 id="跨站脚本攻击（XSS）-编码剖析"><a href="#跨站脚本攻击（XSS）-编码剖析" class="headerlink" title="跨站脚本攻击（XSS）-编码剖析"></a>跨站脚本攻击（XSS）-编码剖析</h1><hr><ul>
<li>前言： 笔者从事安全两年间，看了许多xss文章，踩过很多坑，想按照自己的想法整理一下前辈们的总结，随有了这篇文章，学会XSS，理解浏览器的编码原理是重要的部分之一。</li>
</ul><h2 id="1、浏览器的解码"><a href="#1、浏览器的解码" class="headerlink" title="1、浏览器的解码"></a>1、浏览器的解码</h2><p><img src="/2019/10/14/XSS-编码解码/1.jpg" alt></p><p>上图显示了浏览器从接收代码，到渲染完成的过程：<br>1、HTML/SVG/XHTML 解析，Webkit有三个C++的类对应这三类文档。解析这三种文件会产生一个DOM Tree。<br>2、CSS 解析，解析CSS会产生CSS规则树。<br>3、Javascript DOM，主要是通过DOM API和CSSOM API来操作DOM Tree和CSS Rule Tree.</p><a id="more"></a>



<p>浏览器最早开始解析HTML代码的时候，将标签转化为内容树中的DOM节点，此时浏览器识别标签的时候，其HTML解析器是无法识别<strong>被实体编码的内容</strong>的，（这代表，如果开发人员在服务器端实体编码了我们的代码，那么我们在这一环节将无法改变DOM树结构）只有建立起<strong>DOM树</strong>之后，才能对每个节点的内容进行渲染，在此基础上，JavaScript Dom API参与进来，可以对DOM树进行修改（包含Javascript的恶意代码会触发Javascript解释器，来改变DOM树结构和内容从而执行XSS）。而此时，CSS解析器负责解析外部CSS文件以及Style标签中的样式内容，这些信息将搭配HTML中的可见指令构建一个Rendering Tree。</p>
<h2 id="2、编码和解码发生的顺序"><a href="#2、编码和解码发生的顺序" class="headerlink" title="2、编码和解码发生的顺序"></a>2、编码和解码发生的顺序</h2><p>我们刚才讲解了浏览器的渲染过程。现在我们来看一下从我们输入恶意代码，传入到服务器，再到服务器返回给浏览器，最终浏览器渲染成网页的这段过程中，都发生了什么。</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;a href=&quot;javascript:alert(&apos;&lt;?php echo $_GET[&apos;input&apos;];?&gt;&apos;);&quot;&gt;test&lt;/a&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">input: %26lt%5cu4e00%26gt</span><br></pre></td></tr></table></figure>

<p>假设我们输入的值为 <em>%26lt%5cu4e00%26gt</em> 并通过GET请求提交至服务器，服务器回对我们输入的值进行URL解码，变成 <em>&amp;lt\u4e00&amp;gt</em> ，服务端传回数据给浏览器，浏览器生成了DOM树，此时的代码是这样的：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot; /&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;a href=&quot;javascript:alert(&apos;&amp;lt\u4e00&amp;gt&apos;);&quot;&gt;test&lt;/a&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p>我们可以在页面右键点击 <strong>查看网站源代码</strong> 查看源码。（注意不是F12，F12的检查元素功能看到是的经过浏览器渲染后的内容)</p>
<p>DOM树生成之后，浏览器对我们的代码进行渲染，首先对标签里的元素进行HTML实体解码，我们的代码变为了：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;a href=&quot;javascript:alert(&apos;&lt;\u4e00&gt;&apos;);&quot;&gt;test&lt;/a&gt;\</span><br></pre></td></tr></table></figure>

<p>也就是f12的检查元素中显示的内容</p>
<p>然后，当我们点击链接的时候，浏览器对href中的链接发起了一个请求，执行了Javascript代码，此时Javascript解释器对我们的参数进行了Unicode解码，此时，我们的代码变成了：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;a href=&quot;javascript:alert(&apos;&lt;-&gt;&apos;);&quot;&gt;test&lt;/a&gt;\</span><br></pre></td></tr></table></figure>

<p>并最终弹框。<br><img src="/2019/10/14/XSS-编码解码/2.png" alt></p>
<h2 id="3、一些注意事项"><a href="#3、一些注意事项" class="headerlink" title="3、一些注意事项"></a>3、一些注意事项</h2><p>当我们尝试使用编码来绕过过滤器时，要避免一些特殊的情况，如：<br>1、不能对Javacscript等伪协议进行URL编码，URL解码后会当做无协议处理。<br>2、在进行HTML解码的时候，不能对 <strong>“(‘</strong> 这些特殊字符进行HTML实体编码，解码后这些字符将变成普通文本。<br>3、在进行Javascript解析的时候，<strong>“(‘</strong> 这些控制字符不能进行JS编码，解码后这些符号被当做文本处理。</p>
<hr>
<h3 id="本文作者：Sh4Nn0n"><a href="#本文作者：Sh4Nn0n" class="headerlink" title="本文作者：Sh4Nn0n"></a>本文作者：Sh4Nn0n</h3><h3 id="本文首发于Sh4Nn0n’s-Blog，写文不易，转载请注明出处。"><a href="#本文首发于Sh4Nn0n’s-Blog，写文不易，转载请注明出处。" class="headerlink" title="本文首发于Sh4Nn0n’s Blog，写文不易，转载请注明出处。"></a>本文首发于<a href="http://www.sh4nn0n.com" target="_blank" rel="noopener">Sh4Nn0n’s Blog</a>，写文不易，转载请注明出处。</h3>]]></content>
      <categories>
        <category>渗透测试</category>
      </categories>
      <tags>
        <tag>渗透测试</tag>
        <tag>XSS</tag>
        <tag>Web安全</tag>
      </tags>
  </entry>
  <entry>
    <title>Python-正则表达式</title>
    <url>/2019/10/12/Python-%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="Python-正则表达式"><a href="#Python-正则表达式" class="headerlink" title="Python-正则表达式"></a>Python-正则表达式</h1><hr><h2 id="1-正则表达式"><a href="#1-正则表达式" class="headerlink" title="1.正则表达式"></a>1.正则表达式</h2><p>正则表达式用来匹配特定的字符串，python中提供RE模块进行正则表达式匹配。</p><h3 id="1-1-正则表达式语法"><a href="#1-1-正则表达式语法" class="headerlink" title="1.1 正则表达式语法"></a>1.1 正则表达式语法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\w    # 匹配任意字母、数字、下划线</span><br><span class="line">\W    # 匹配任意非字母、数字、下划线</span><br><span class="line">\d    # 匹配数字</span><br><span class="line">\D    # 匹配所有的非数字</span><br><span class="line">\s    # 匹配空白符号(空格、Tab等)</span><br><span class="line">\S    # 匹配所有非文本</span><br><span class="line">.     # 匹配任意字符1次</span><br><span class="line">*     # 匹配前面的表达式0/n次 \d*</span><br><span class="line">+     # 匹配前面的表达式1/n次 \d+</span><br><span class="line">?     # 匹配前面的表达式0/1次</span><br><span class="line">&#123;m&#125;   # 匹配前面的表达式m次</span><br><span class="line">&#123;m,&#125;  # 匹配前面的表达式N到无穷</span><br><span class="line">&#123;,n&#125;  # 匹配前面的表达式0到M次</span><br><span class="line">&#123;m,n&#125; # 匹配前面的表达式m到n次 \d&#123;m,n&#125;</span><br><span class="line">*?    # 匹配前面的表达式0次</span><br><span class="line">+?    # 匹配前面的表达式1次</span><br><span class="line">[]    # 字符集 [a-zA-Z0-9\_]</span><br><span class="line">()    # 分组</span><br><span class="line">|     # 或运算 (p|P)ython</span><br><span class="line">^     # 开始符 ^\d</span><br><span class="line">$     # 结尾符 \d$</span><br></pre></td></tr></table></figure><a id="more"></a>



<p>这里需要提到一个概念，正则表达式分为<strong>贪婪</strong>和<strong>非贪婪</strong>模式，而python中数量词默认是<strong>贪婪</strong>的，尽可能匹配多的字符，贪婪模式下字符串查找会直接走到字符串末尾进行，如果不相等就向前寻找，称为回溯。</p>
<h3 id="1-2-常用匹配的正则语法"><a href="#1-2-常用匹配的正则语法" class="headerlink" title="1.2 常用匹配的正则语法"></a>1.2 常用匹配的正则语法</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.汉字：[\u4e00-\u9fa5]&#123;0,&#125;</span><br><span class="line">2.英文和数字：[A-Za-z0-9]+</span><br><span class="line">3.长度为3-20的所有字符：.&#123;3,20&#125;</span><br><span class="line">4.Email地址：\w+([-+.]\w+)@\w+([-.]\w+).\w+([-.]\w+)*</span><br><span class="line">5.域名：[a-zA-Z0-9][-a-zA-Z0-9]&#123;0,62&#125;(/.[a-zA-Z0-9][-a-zA-Z0-9]&#123;0,62&#125;)+/.?</span><br><span class="line">6.InternetURL：[a-zA-z]+://[^\s] 或 ^http://([\w-]+.)+[\w-]+(/[\w-./?%&amp;=])?$</span><br><span class="line">7.手机号码：^(13[0-9]|14[5|7]|15[0|1|2|3|5|6|7|8|9]|18[0|1|2|3|5|6|7|8|9])\d&#123;8&#125;$</span><br><span class="line">8.国内电话号码：\d&#123;3&#125;-\d&#123;8&#125;|\d&#123;4&#125;-\d&#123;7&#125;(0511-4405222、021-87888822)</span><br><span class="line">9.日期格式：^\d&#123;4&#125;-\d&#123;1,2&#125;-\d&#123;1,2&#125;</span><br><span class="line">10.空白行的正则表达式：\n\s*\r (可以用来删除空白行)</span><br><span class="line">11.腾讯QQ号：[1-9][0-9]&#123;4,&#125;</span><br><span class="line">11.IP地址提取：\d+.\d+.\d+.\d+</span><br></pre></td></tr></table></figure>

<h2 id="2-RE模块"><a href="#2-RE模块" class="headerlink" title="2.RE模块"></a>2.RE模块</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">import re       # 下面仅列出常用方法</span><br><span class="line"></span><br><span class="line">re.compile(pattern[, flags]) 	    # 创建一个正则表达式对象</span><br><span class="line">re.search(pattern, string[, flags]) # 查找符合表达式的第一个对象</span><br><span class="line">re.match(pattern, string[, flags])  # 查找符合表达式的对象</span><br><span class="line">re.findall(pattern, string, flags)  # 获取字符串中所有匹配的字符串，返回一个列表</span><br><span class="line">re.split(pattern, string[, maxsplit=0, flags]) # 根据模式的匹配项分割字符串</span><br><span class="line">re.sub(pattern,repl, string[, count=0, flags]) # 将字符串中所有的pattern的匹配项用repl替换</span><br><span class="line">re.escape(string) 		    # 将字符串所有特殊正则表达式字符转义</span><br><span class="line"></span><br><span class="line">pattern # 编译时用的表达式字符串</span><br><span class="line"></span><br><span class="line">flags   # 编译标志位</span><br><span class="line">re.S(DOTALL)	  # 使.匹配包括换行在内的所有字符</span><br><span class="line">re.I(IGNORECASE)  # 使匹配对大小写不敏感</span><br><span class="line">re.L(LOCALE)      # 做本地化识别（locale-aware)匹配，法语等</span><br><span class="line">re.M(MULTILINE)   # 多行匹配，影响^和$</span><br><span class="line">re.X(VERBOSE)     # 该标志通过给予更灵活的格式以便将正则表达式写得更易于理解</span><br><span class="line">re.U(Unicode)	  # 根据Unicode字符集解析字符，这个标志影响\w,\W,\b,\B</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="本文作者：Sh4Nn0n"><a href="#本文作者：Sh4Nn0n" class="headerlink" title="本文作者：Sh4Nn0n"></a>本文作者：Sh4Nn0n</h3><h3 id="本文首发于Sh4Nn0n’s-Blog，写文不易，转载请注明出处。"><a href="#本文首发于Sh4Nn0n’s-Blog，写文不易，转载请注明出处。" class="headerlink" title="本文首发于Sh4Nn0n’s Blog，写文不易，转载请注明出处。"></a>本文首发于<a href="http://www.sh4nn0n.com" target="_blank" rel="noopener">Sh4Nn0n’s Blog</a>，写文不易，转载请注明出处。</h3>]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>正则表达式</tag>
      </tags>
  </entry>
</search>
